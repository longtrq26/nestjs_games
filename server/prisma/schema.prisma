generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens  RefreshToken[]
  gamesAsPlayer1 TicTacToeGame[] @relation("Player1Games")
  gamesAsPlayer2 TicTacToeGame[] @relation("Player2Games")
  ticTacToeMoves TicTacToeMove[]
  line98Games    Line98Game[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicTacToePlayerSymbol {
  X
  O
}

enum TicTacToeGameStatus {
  WAITING_FOR_PLAYER
  IN_PROGRESS
  FINISHED
  ABORTED
}

model TicTacToeGame {
  id                  String                 @id @default(uuid())
  player1Id           String
  player1             User                   @relation("Player1Games", fields: [player1Id], references: [id])
  player1Symbol       TicTacToePlayerSymbol?
  player2Id           String?
  player2             User?                  @relation("Player2Games", fields: [player2Id], references: [id])
  player2Symbol       TicTacToePlayerSymbol?
  currentPlayerSymbol TicTacToePlayerSymbol?
  status              TicTacToeGameStatus    @default(WAITING_FOR_PLAYER)
  winnerSymbol        TicTacToePlayerSymbol?
  boardState          String
  moves               TicTacToeMove[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model TicTacToeMove {
  id           String                @id @default(uuid())
  gameId       String
  game         TicTacToeGame         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId       String
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  playerSymbol TicTacToePlayerSymbol
  position     Int
  createdAt    DateTime              @default(now())
}

enum Line98GameStatus {
  IN_PROGRESS
  FINISHED
}

model Line98Game {
  id         String           @id @default(uuid())
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  boardState String
  nextBalls  String
  status     Line98GameStatus @default(IN_PROGRESS)
  score      Int              @default(0)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}
